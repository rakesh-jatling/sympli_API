{
	"info": {
		"_postman_id": "229fe5c9-5eca-4973-95be-c4b183e6d536",
		"name": "sympli_API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Pull Request - No Params",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "14a2a9cc-554b-4967-9737-a0c13a2b2070",
						"exec": [
							"pm.test(\"Get Pull Requests - Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Get Pull Requests - returns valid body\", function() {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var expectedKeys = [\"url\", \"id\", \"node_id\", \"html_url\", \"diff_url\", \"patch_url\", \"issue_url\", \"number\", \"state\", \"locked\",",
							"                    \"title\", \"user\", \"body\", \"created_at\", \"updated_at\", \"closed_at\", \"merged_at\", \"merge_commit_sha\", \"assignee\",\"assignees\",\"requested_reviewers\",\"requested_teams\",\"labels\",\"milestone\", \"draft\",\"commits_url\",\"review_comments_url\",\"review_comment_url\",\"comments_url\",\"statuses_url\", \"head\", \"base\", \"_links\", \"author_association\",\"active_lock_reason\"];",
							"",
							"var data = JSON.parse(responseBody);",
							"",
							"pm.test(\"Get Pull Requests - Response body must have valid keys\", function () {",
							"  data.forEach(function(item) {",
							"      pm.expect(item).to.have.all.keys(expectedKeys); ",
							"  });",
							"});",
							"",
							"var userKeys = [\"login\",\"id\",\"node_id\",\"avatar_url\",\"gravatar_id\",\"url\",\"html_url\",\"followers_url\",\"following_url\",\"gists_url\",",
							"                \"starred_url\",\"subscriptions_url\",\"organizations_url\",\"repos_url\",\"events_url\",\"received_events_url\",\"type\",",
							"                \"site_admin\"]",
							"",
							"pm.test(\"Get Pull Requests - Response body must have valid User keys\", function () {",
							"  data.forEach(function(item) {",
							"      pm.expect(item.user).to.have.all.keys(userKeys); ",
							"  });",
							"});",
							"",
							"var headKeys = [\"label\", \"ref\", \"sha\", \"user\", \"repo\"]",
							"",
							"pm.test(\"Get Pull Requests - Response body must have valid Head keys\", function () {",
							"  data.forEach(function(item) {",
							"      pm.expect(item.head).to.have.all.keys(headKeys); ",
							"  });",
							"});",
							"",
							"pm.test(\"Get Pull Requests - Response body must have valid Head keys\", function () {",
							"  data.forEach(function(item) {",
							"      pm.expect(item.base).to.have.all.keys(headKeys); ",
							"  });",
							"});",
							"",
							"var linkKeys = [\"self\", \"html\", \"issue\", \"comments\", \"review_comments\", \"review_comment\", \"commits\", \"statuses\"]",
							"",
							"pm.test(\"Get Pull Requests - Response body must have valid _links keys\", function () {",
							"  data.forEach(function(item) {",
							"      pm.expect(item._links).to.have.all.keys(linkKeys); ",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/vnd.github.v3+json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json; charset=utf-8",
						"type": "text"
					},
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{base_url}}/repos/{{owner}}/{{repo_campb}}/pulls",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"repos",
						"{{owner}}",
						"{{repo_campb}}",
						"pulls"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Pull Request - No owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4f96ed40-29e2-4f1a-b0ff-ef0b9be2a0c2",
						"exec": [
							"pm.test(\"Get Pull Requests - No owner - Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get Pull Requests - No owner - returns valid body\", function() {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var data = JSON.parse(responseBody);",
							"",
							"pm.test(\"Get Pull Requests - No owner - Response body error message\", function () {",
							"    pm.expect(data.message).to.be.eq(\"Not Found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/vnd.github.v3+json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json; charset=utf-8"
					},
					{
						"key": "",
						"type": "text",
						"value": "",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{base_url}}/repos//{{repo_campb}}/pulls",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"repos",
						"",
						"{{repo_campb}}",
						"pulls"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Pull Request - No repo",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e21e4d00-42b0-4526-bf25-5d92c504c6a3",
						"exec": [
							"pm.test(\"Get Pull Requests - No repo - Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get Pull Requests - No repo - returns valid body\", function() {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var data = JSON.parse(responseBody);",
							"",
							"pm.test(\"Get Pull Requests - No repo - Response body error message\", function () {",
							"    pm.expect(data.message).to.be.eq(\"Not Found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/vnd.github.v3+json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json; charset=utf-8"
					}
				],
				"url": {
					"raw": "{{base_url}}/repos/{{owner}}//pulls",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"repos",
						"{{owner}}",
						"",
						"pulls"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Pull Request - repo with no pull requests",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e90a927e-74c6-48f4-9937-48a0a4b080f9",
						"exec": [
							"pm.test(\"Get Pull Requests - no pull requests - Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Get Pull Requests - no pull requests - returns valid body\", function() {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var data = JSON.parse(responseBody);",
							"",
							"pm.test(\"Get Pull Requests - no pull requests - Response body must be empty\", function () {",
							"  data.forEach(function(item) {",
							"      pm.expect(item).to.be.eq(null); ",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/vnd.github.v3+json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json; charset=utf-8",
						"type": "text"
					},
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{base_url}}/repos/{{owner}}/{{repo_kakadu}}/pulls",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"repos",
						"{{owner}}",
						"{{repo_kakadu}}",
						"pulls"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Pull Request - state - Open",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "59ab19da-fd6b-41c0-b741-f841293c6b3d",
						"exec": [
							"pm.test(\"Get Pull Requests - State Open - Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Get Pull Requests - State Open - returns valid body\", function() {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var data = JSON.parse(responseBody);",
							"",
							"// Check \"state\": \"open\" and not equal to closed",
							"pm.test(\"Get Pull Requests - State Open - Response body must only have Open State\", function () {",
							"  data.forEach(function(item) {",
							"      pm.expect(item.state).to.be.eq(\"open\"); ",
							"      pm.expect(item.state).to.not.eq(\"closed\");",
							"  });",
							"});",
							"",
							"var expectedKeys = [\"url\", \"id\", \"node_id\", \"html_url\", \"diff_url\", \"patch_url\", \"issue_url\", \"number\", \"state\", \"locked\",",
							"                    \"title\", \"user\", \"body\", \"created_at\", \"updated_at\", \"closed_at\", \"merged_at\", \"merge_commit_sha\", \"assignee\",\"assignees\",\"requested_reviewers\",\"requested_teams\",\"labels\",\"milestone\", \"draft\",\"commits_url\",\"review_comments_url\",\"review_comment_url\",\"comments_url\",\"statuses_url\", \"head\", \"base\", \"_links\", \"author_association\",\"active_lock_reason\"];",
							"",
							"pm.test(\"Get Pull Requests - State Open - Response body must have valid keys\", function () {",
							"  data.forEach(function(item) {",
							"      pm.expect(item).to.have.all.keys(expectedKeys); ",
							"  });",
							"});",
							"",
							"var userKeys = [\"login\",\"id\",\"node_id\",\"avatar_url\",\"gravatar_id\",\"url\",\"html_url\",\"followers_url\",\"following_url\",\"gists_url\",",
							"                \"starred_url\",\"subscriptions_url\",\"organizations_url\",\"repos_url\",\"events_url\",\"received_events_url\",\"type\",",
							"                \"site_admin\"]",
							"",
							"pm.test(\"Get Pull Requests - State Open - Response body must have valid User keys\", function () {",
							"  data.forEach(function(item) {",
							"      pm.expect(item.user).to.have.all.keys(userKeys); ",
							"  });",
							"});",
							"",
							"var headKeys = [\"label\", \"ref\", \"sha\", \"user\", \"repo\"]",
							"",
							"pm.test(\"Get Pull Requests - State Open - Response body must have valid Head keys\", function () {",
							"  data.forEach(function(item) {",
							"      pm.expect(item.head).to.have.all.keys(headKeys); ",
							"  });",
							"});",
							"",
							"pm.test(\"Get Pull Requests - State Open - Response body must have valid Head keys\", function () {",
							"  data.forEach(function(item) {",
							"      pm.expect(item.base).to.have.all.keys(headKeys); ",
							"  });",
							"});",
							"",
							"var linkKeys = [\"self\", \"html\", \"issue\", \"comments\", \"review_comments\", \"review_comment\", \"commits\", \"statuses\"]",
							"",
							"pm.test(\"Get Pull Requests - State Open - Response body must have valid _links keys\", function () {",
							"  data.forEach(function(item) {",
							"      pm.expect(item._links).to.have.all.keys(linkKeys); ",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/vnd.github.v3+json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json; charset=utf-8"
					},
					{
						"key": "",
						"type": "text",
						"value": "",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{base_url}}/repos/{{owner}}/{{repo_campb}}/pulls?state=open",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"repos",
						"{{owner}}",
						"{{repo_campb}}",
						"pulls"
					],
					"query": [
						{
							"key": "state",
							"value": "open"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Pull Request - state - Closed",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2d9208f2-4d7f-4a4e-8ea8-141a797bcc2c",
						"exec": [
							"pm.test(\"Get Pull Requests - State Closed - Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Get Pull Requests - State Closed - returns valid body\", function() {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var data = JSON.parse(responseBody);",
							"",
							"// Check \"state\": \"Closed\" and not equal to open",
							"pm.test(\"Get Pull Requests - State Closed - Response body must only have Open State\", function () {",
							"  data.forEach(function(item) {",
							"      pm.expect(item.state).to.not.eq(\"open\"); ",
							"      pm.expect(item.state).to.be.eq(\"closed\");",
							"  });",
							"});",
							"",
							"var expectedKeys = [\"url\", \"id\", \"node_id\", \"html_url\", \"diff_url\", \"patch_url\", \"issue_url\", \"number\", \"state\", \"locked\",",
							"                    \"title\", \"user\", \"body\", \"created_at\", \"updated_at\", \"closed_at\", \"merged_at\", \"merge_commit_sha\", \"assignee\",\"assignees\",\"requested_reviewers\",\"requested_teams\",\"labels\",\"milestone\", \"draft\",\"commits_url\",\"review_comments_url\",\"review_comment_url\",\"comments_url\",\"statuses_url\", \"head\", \"base\", \"_links\", \"author_association\",\"active_lock_reason\"];",
							"",
							"pm.test(\"Get Pull Requests - State Closed - Response body must have valid keys\", function () {",
							"  data.forEach(function(item) {",
							"      pm.expect(item).to.have.all.keys(expectedKeys); ",
							"  });",
							"});",
							"",
							"var userKeys = [\"login\",\"id\",\"node_id\",\"avatar_url\",\"gravatar_id\",\"url\",\"html_url\",\"followers_url\",\"following_url\",\"gists_url\",",
							"                \"starred_url\",\"subscriptions_url\",\"organizations_url\",\"repos_url\",\"events_url\",\"received_events_url\",\"type\",",
							"                \"site_admin\"]",
							"",
							"pm.test(\"Get Pull Requests - State Closed - Response body must have valid User keys\", function () {",
							"  data.forEach(function(item) {",
							"      pm.expect(item.user).to.have.all.keys(userKeys); ",
							"  });",
							"});",
							"",
							"var headKeys = [\"label\", \"ref\", \"sha\", \"user\", \"repo\"]",
							"",
							"pm.test(\"Get Pull Requests - State Closed - Response body must have valid Head keys\", function () {",
							"  data.forEach(function(item) {",
							"      pm.expect(item.head).to.have.all.keys(headKeys); ",
							"  });",
							"});",
							"",
							"pm.test(\"Get Pull Requests - State Closed - Response body must have valid Head keys\", function () {",
							"  data.forEach(function(item) {",
							"      pm.expect(item.base).to.have.all.keys(headKeys); ",
							"  });",
							"});",
							"",
							"var linkKeys = [\"self\", \"html\", \"issue\", \"comments\", \"review_comments\", \"review_comment\", \"commits\", \"statuses\"]",
							"",
							"pm.test(\"Get Pull Requests - State Closed - Response body must have valid _links keys\", function () {",
							"  data.forEach(function(item) {",
							"      pm.expect(item._links).to.have.all.keys(linkKeys); ",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/repos/octocat/hello-world/pulls?state=closed",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"repos",
						"octocat",
						"hello-world",
						"pulls"
					],
					"query": [
						{
							"key": "state",
							"value": "closed"
						}
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}